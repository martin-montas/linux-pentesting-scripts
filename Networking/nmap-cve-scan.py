#!  /usr/bin/env python3
"""
                    Networking/nmap-cve-scan.py
                    by: martin-montas

                    This script will scan a list of targets
                    and search for CVEs related to the service
                    using the NVD API.

                    usage: python3.11 nmap-cve-scan.py

"""

import threading
import os
import requests
import sys
import time
import nmap
from concurrent.futures import ThreadPoolExecutor
# ANSI escape codes for colors
RESET = "\033[0m"
GREEN = "\033[32m"
CYAN = "\033[36m"
BLUE = "\033[34m"
YELLOW = "\033[33m"
MAGENTA = "\033[35m"
RED = "\033[31m"

full_file_name = "targets.txt"

def distribute_nmap_scans(targets):
    """
        Distributes nmap scans to multiple threads.
        Parameters:
        targets (list): A list of targets to scan.
        Returns:
        dict: A dictionary with the results of the nmap scans.

    """

    print(f"{GREEN}[+]{RESET} successfully started scanning {len(targets)} targets...")
    with ThreadPoolExecutor(max_workers=5) as executor:
        executor.map(run_nmap_scan, targets)

def search_cve(service_name):
    """
        Search for CVEs related to a given service using the NVD API.
        Parameters:
        service_name (str): The name of the service to search for.
        Returns:
        list: A list of CVEs related to the service.
    """

    """
    ALERT:
         Before running your script, make sure to set the NVD_API_KEY environment variable 
         with your API key:

         export NVD_API_KEY="your_api_key_here:
    """
    api_key = os.environ.get('NVD_API_KEY')
    if not api_key:
        print(f"{RED}[ERROR]{RESET} NVD_API_KEY environment variable is not set.")
        return

    url = "https://services.nvd.nist.gov/rest/json/cves/1.0"
    headers = {"apiKey": api_key}
    params = {"keyword": service_name}

    print(f"{BLUE}[*]{RESET} Searching for CVEs related to {service_name}...")
    try:
        response = requests.get(url, headers=headers, params=params)
        cve_data = response.json()
        if response.status_code == 200:
            return cve_data.get("result", {}).get("CVE_Items", [])

        elif response.status_code == 429:
            # API rate limit exceeded
            retry_after = int(response.headers.get("Retry-After", 10))  # Default to retry after 10 seconds
            print(f"{RED}[!]{RESET} API rate limit exceeded. Retrying after {retry_after} seconds...")
            time.sleep(retry_after)
            # Retry the request
        else:
            # Other HTTP errors
            print(f"{RED}[!]{RESET} HTTP Error {response.status_code}: {response.reason}")

    except requests.RequestException as e:
        # Network-related errors
        print(f"{RED}[!]{RESET} Request failed: {e}")

def run_nmap_scan(target):
    """
        Runs nmap scans on a list of targets.
        this function returns a dictionary with the results.
        Parameters:
        targets (list): A list of targets to scan.
        
        Returns:
        dict: A dictionary with the results of the nmap scans.
    """


    print(f"{BLUE}[*]{RESET} scanning {target}...")
    nm = nmap.PortScanner()  # Create an instance of nmap.PortScanner

    # Run nmap scans on the targets
    try:
        nm.scan(target, arguments="-sV")
        # print(nm.scanstats())
        # print(nm.all_hosts())
        print(f"{GREEN}[+]{RESET} nmap scan results for {target}:")
        print(nm[target].hostname())
        print(nm[target].all_protocols())
    except KeyboardInterrupt:
        print(f"{RED}[-]{RESET} Exiting...")
        sys.exit(1)


    # [TODO] make this code prettier:
    """
    # Accessing scan details for each host
    for host in nm.all_hosts():
        print('Host : %s (%s)' % (host, nm[host].hostname()))
        print('State : %s' % nm[host].state())
        for proto in nm[host].all_protocols():
            print('Protocol : %s' % proto)

            lport = nm[host][proto].keys()
            for port in sorted(lport):
                print('port : %s\tstate : %s' % (port, nm[host][proto][port]['state']))
    """

if __name__ == "__main__":
    print(f"--------------------------------------------------------------")
    print("                 NMAP CVE SCAN                      ")
    print(f"--------------------------------------------------------------")
    print("\n")

    # Read targets from file
    try:
        with open(full_file_name, "r") as f:
            targets = f.read().splitlines()
    except FileNotFoundError:
        print(f"[{RED}!{RESET}] File ${full_file_name} not found.")
        sys.exit(1)

    distribute_nmap_scans(targets)



