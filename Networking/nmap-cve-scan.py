#!  /usr/bin/env python3
"""
                    Networking/nmap-cve-scan.py
                    by: martin-montas

                    This script will scan a list of targets
                    and search for CVEs related to the service
                    using the NVD API.

                    usage: python3.11 nmap-cve-scan.py

"""

import os
import sys
import nmap
import nvdlib 
from concurrent.futures import ThreadPoolExecutor

from requests.sessions import dispatch_hook
# ANSI escape codes for colors
RESET = "\033[0m"
GREEN = "\033[32m"
CYAN = "\033[36m"
BLUE = "\033[34m"
YELLOW = "\033[33m"
MAGENTA = "\033[35m"
RED = "\033[31m"

full_file_name = "targets.txt"


LIMIT_CVE = 3

# Fetch the NVD API key from environment variables
API_KEY = os.environ.get('NVD_API_KEY')

if not API_KEY:
    raise ValueError("NVD API key not found in environment variables")


def nmap_icmp(target):
    """
        Runs nmap scans on a list of targets.
        this function returns a dictionary with the results.
        Parameters:
        targets (list): A list of targets to scan.
        Returns:
        dict: A dictionary with the results of the nmap scans.
    """
    print(f"{MAGENTA}[*] PING:{RESET} Pinging {target} for availability...")
    nm = nmap.PortScanner()
    nm.scan(hosts=target, arguments="-sP")

    if nm.all_hosts() == []:
            print(f"{RED}[-] {RED}HOST IS NOT UP:{RESET}{RESET} No hosts found    for {target}")
    else:
            print(f"{GREEN}[+] {GREEN}HOST IS UP:{RESET}{RESET} Ping scan results for {target}")
        # print(nm.all_hosts())



def distribute_nmap_scans(targets):
    """
        Distributes nmap scans to multiple threads.
        Parameters:
        targets (list): A list of targets to scan.
        Returns:
        dict: A dictionary with the results of the nmap scans.

    """

    print(f"{GREEN}[+] SUCCESS:{RESET} Successfully started scanning {len(targets)} targets")

    with ThreadPoolExecutor(max_workers=5) as executor:
        executor.map(run_nmap_scan, targets)


            

def get_severity(score):
    """
    Determine the severity level based on the CVSS score.

    Parameters:
    score (float): The CVSS score of the vulnerability.

    Returns:
    str: The severity level ("HIGH", "MEDIUM", or "LOW").
    """
    if score >= 7.0:
        return "HIGH"
    elif score >= 4.0:
        return "MEDIUM"
    else:
        return "LOW"





def search_cve(service, version):
    """
    Search for CVEs related to a given service and version using the NVD API.

    Parameters:
    service (str): The name of the service to search for.
    version (str): The version of the service to search for.

    Returns:
    list: A list of CVEs related to the service and version.
    """

    keywordSearch = f"{service} {version}"
    r = nvdlib.searchCVE_V2(keywordSearch=keywordSearch, limit=LIMIT_CVE, key=API_KEY)

    # Loop through the vulnerabilities
    for oneCVE in r:
        print("CVE ID:", oneCVE.id)

def run_nmap_scan(target):
    """
        Runs nmap scans on a list of targets.
        this function returns a dictionary with the results.
        Parameters:
        targets (list): A list of targets to scan.
        
        Returns:
        dict: A dictionary with the results of the nmap scans.
    """

    print(f"{BLUE}[*]{RESET} Scanning {target}...")
    nm = nmap.PortScanner()  # Create an instance of nmap.PortScanner

    # Runs the ping scan for availability 
    nmap_icmp(target)

    # Run nmap scans on the targets
    try:
        nm.scan(target, arguments="-sV")

    except KeyboardInterrupt:
        print(f" {RED}[-] ERROR: {RESET} Exiting...")
        sys.exit(1)

    print(f"{GREEN}[+] DONE:{RESET} Nmap scan results for {target}:")

    for host in nm.all_hosts():
        print(f"------------------{RED}[{host}]{RESET}---------------------")
        for port in nm[host]['tcp']:
            port_info = nm[host]['tcp'][port]
            version = port_info.get('version', 'Unknown')
            product = port_info.get('product', 'Unknown')
            print(f"{GREEN}[+]{RESET} {RED}{port}{RESET} {product}{version}")

            search_cve(product, version)



if __name__ == "__main__":
    print( """
 _______ _     _  ______ _______ _______ ______      _______ _______ _______ __   _
    |    |_____| |_____/ |______ |_____| |     \ ___ |______ |       |_____| | \  |
    |    |     | |    \_ |______ |     | |_____/     ______| |_____  |     | |  \_|
                                                                                   
    """)
    # Read targets from file
    try:
        with open(full_file_name, "r") as f:
            targets = f.read().splitlines()
    except FileNotFoundError:
        print(f" {RED}[!] ERROR:{RESET} File ${full_file_name} not found.")
        sys.exit(1)

    try:

        distribute_nmap_scans(targets)

    except KeyboardInterrupt:
        print(f" {RED}[-] ERROR: {RESET} Exiting...")
        sys.exit(1)



